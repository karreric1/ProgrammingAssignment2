getwd()
setwd "c:/Users/ekarr/ProgrammingAssignment2"
setwd()
setwd ("c:/Users/ekarr/ProgrammingAssignment2")
ls
dir
dir()
?rbind
?solve
?ginv
load(mass)
?package
?load
?matrix
matrix1 <- rbind(c(1, 2), c(3, 4))
class (matrix1)
class(matrix1[,1])
class(matrix1c[,1])
class(matrix1 c[,1])
## These two functions will compute the inverse of a matrix.  If hte matrix has already been calculated and the values do not
#change, a cached copy will be called to speed up calculation time.
## The makeCacheMatrix function caches an inverse of a matrix and has one argument, x
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- funciton(y) {
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,get = get, setinverse = setinverse, getinverse = getinverse)
}
## The cacheSolve function computes the inverse of a matrix returned by makeCacheMatrix, has one argument, x
##and passes variables through if needed.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$inverse()
if(!is.null(i)) {  ##this if statement checks for presence of cached data
message("getting cached data")
return(i)  ##returns cached data if present
}
data <- x$get()
i <- solve(x)%*%x ##calculates inverse of matrix x
x$setinverse(i)
i  ## returns inverse of matrix
}
cachesolve(matrix1)
cacheSolve(matrix1)
